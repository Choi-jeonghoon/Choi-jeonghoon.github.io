{"componentChunkName":"component---src-templates-post-tsx","path":"/nextAuth/","result":{"data":{"contentfulPost":{"title":"NextAuth.js 사용방법","category":["웹 개발","React.js"],"date":"2024-08-06","slug":"nextAuth","thumbnail":{"url":"https://images.ctfassets.net/v4l4nvur12dk/StOcIEnrgGTLrkENJnSQk/4601c890e1a1af14857b79e671f122eb/___________2024-08-06______11.14.17.png","gatsbyImageData":{"images":{"sources":[{"srcSet":"https://images.ctfassets.net/v4l4nvur12dk/StOcIEnrgGTLrkENJnSQk/4601c890e1a1af14857b79e671f122eb/___________2024-08-06______11.14.17.png?w=250&h=104&q=50&fm=webp 250w,\nhttps://images.ctfassets.net/v4l4nvur12dk/StOcIEnrgGTLrkENJnSQk/4601c890e1a1af14857b79e671f122eb/___________2024-08-06______11.14.17.png?w=500&h=207&q=50&fm=webp 500w,\nhttps://images.ctfassets.net/v4l4nvur12dk/StOcIEnrgGTLrkENJnSQk/4601c890e1a1af14857b79e671f122eb/___________2024-08-06______11.14.17.png?w=1000&h=414&q=50&fm=webp 1000w","sizes":"(min-width: 1000px) 1000px, 100vw","type":"image/webp"}],"fallback":{"src":"https://images.ctfassets.net/v4l4nvur12dk/StOcIEnrgGTLrkENJnSQk/4601c890e1a1af14857b79e671f122eb/___________2024-08-06______11.14.17.png?w=1000&h=414&q=50&fm=png","srcSet":"https://images.ctfassets.net/v4l4nvur12dk/StOcIEnrgGTLrkENJnSQk/4601c890e1a1af14857b79e671f122eb/___________2024-08-06______11.14.17.png?w=250&h=104&q=50&fm=png 250w,\nhttps://images.ctfassets.net/v4l4nvur12dk/StOcIEnrgGTLrkENJnSQk/4601c890e1a1af14857b79e671f122eb/___________2024-08-06______11.14.17.png?w=500&h=207&q=50&fm=png 500w,\nhttps://images.ctfassets.net/v4l4nvur12dk/StOcIEnrgGTLrkENJnSQk/4601c890e1a1af14857b79e671f122eb/___________2024-08-06______11.14.17.png?w=1000&h=414&q=50&fm=png 1000w","sizes":"(min-width: 1000px) 1000px, 100vw"}},"layout":"constrained","backgroundColor":"#181828","width":1000,"height":414}},"description":{"description":"NextAuth 를 활용한 소셜 로그인 또는 일반로그인 기능을 구현하는 방법"},"content":{"raw":"{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"가장 최근까지 했던 프로젝트에서 담당했던 기능중 Auth.js를 활용한 로그인 기능에 대해서 알아보겠습니다.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"개발 환경은 다음과 같습니다.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\" \\\"react\\\": \\\"^18\\\",\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"list-item\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"\\\"bcryptjs\\\": \\\"^2.4.3\\\"\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"list-item\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"\\\"next\\\": \\\"14.2.4\\\"    \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"list-item\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"\\\"next-auth\\\": \\\"^5.0.0-beta.19\\\"\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"list-item\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"\\\"firebase\\\": \\\"^10.12.2\\\"\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"list-item\"}],\"nodeType\":\"unordered-list\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"버전 관련 설명:\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"해당 기능은 개발 당시 베타 버전에서 작업하였으며, 설치 및 개발 과정도 베타 버전을 기반으로 진행되었습니다. 현재는 해당 기능이 정식 버전으로 출시된 상태입니다. 최신 버전을 참고하여 개발하거나 적용할 때는 정식 버전의 문서와 가이드를 참조하시기 바랍니다.😅\\n\\n\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"파일구조\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{\"target\":{\"sys\":{\"id\":\"1Nqvz5GZwOL8TL4fknkacH\",\"type\":\"Link\",\"linkType\":\"Asset\"}}},\"content\":[],\"nodeType\":\"embedded-asset-block\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"\\n\\n이제 본격적으로 코드를 작성해보자.(npm install next-auth 등등 설치는 당연해야된다...!)\\n일단 api파일 경로를 따라가 만들어준 route.ts를 파일을 만들어주고 아래 코드를 작성해준다.\\n\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"code\"}],\"value\":\"language::typescript\\nimport {handlers} from \\\"@/auth\\\";\\n\\nexport const { GET, POST } = handlers;\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"다음 으로해야되는건 루트 경로에 auth.ts 파일을 만들어 아래 코드를 작성해준다.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"code\"}],\"value\":\"language::typescript\\n// NextAuth, 인증 공급자, Firebase 및 기타 필요한 모듈을 가져옵니다.\\nimport NextAuth from \\\"next-auth\\\";\\nimport credentials from \\\"next-auth/providers/credentials\\\";\\nimport { authConfig } from \\\"./auth.config\\\"; // 인증 구성 설정 가져오기\\nimport { collection, getDocs, query, where } from \\\"firebase/firestore\\\";\\nimport { firestore } from \\\"./firebase/firebaseConfig\\\"; // Firebase 설정 가져오기\\nimport { compare } from \\\"bcryptjs\\\"; // 비밀번호 비교를 위한 bcryptjs 라이브러리\\n\\n// NextAuth 설정을 초기화하고 필요한 인증 설정을 제공합니다.\\nexport const { auth, signIn, signOut, handlers } = NextAuth({\\n  ...authConfig, // 추가 인증 설정 가져오기\\n  providers: [\\n    // Credentials(자격 증명) 제공자를 설정합니다.\\n    credentials({\\n      name: \\\"Credentials\\\",\\n      credentials: {\\n        username: { label: \\\"Username\\\", type: \\\"text\\\", placeholder: \\\"아이디\\\" },\\n        password: {\\n          label: \\\"Password\\\",\\n          type: \\\"password\\\",\\n          placeholder: \\\"비밀번호\\\",\\n        },\\n      },\\n      async authorize(credentials) {\\n        const { username, password } = credentials;\\n        console.log(\\\"일반로그인 입력한 아이디 \\\", username);\\n        console.log(\\\"일반로그인 입력한 비밀번호\\\", password);\\n\\n        // Firebase에서 사용자 정보 가져오기\\n        const q = query(\\n          collection(firestore, \\\"users\\\"),\\n          where(\\\"userId\\\", \\\"==\\\", username)\\n        );\\n        const querySnapshot = await getDocs(q);\\n        console.log(\\\"아이디 값======\\\", querySnapshot);\\n\\n        if (querySnapshot.empty) {\\n          throw new Error(\\\"아이디가 없음\\\");\\n        }\\n\\n        const userDoc = querySnapshot.docs[0];\\n        const userData = userDoc.data();\\n\\n        // 비밀번호 비교\\n        const isValidPassword = await compare(\\n          password as string,\\n          userData.password as string\\n        );\\n\\n        if (!isValidPassword) {\\n          throw new Error(\\\"비밀번호가 잘못되었습니다.\\\");\\n        }\\n\\n        return {\\n          id: userDoc.id,\\n          name: userData.name,\\n          email: userData.email,\\n        };\\n      },\\n    }),\\n  ],\\n  secret: process.env.AUTH_SECRET, // 인증에 사용할 비밀 키 설정\\n});\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"위에 작성된 코드는 파이어베이스의  데이터베이스를 활용하여  유저의 정보를 저장 및 관리를 하고있기때문에 위와같이 파이어베이스에서 제공하는 메서드로 사용자 정보를 가져와 찾는게 보일것이다. 해당 부분은 사용자에 따라서 원하는 데이터베이스로 바꿔주면 문제 없다고 생각한다. 참고로 위  코드중에 그냥 중요한 부분은 사용자가 회원가입을 할때 당연 hash 처리를 했을텐데 그거를 비교할때 사용하는 라이브러리가 \\nbcryptjs 에서 제공하는 compare이다. 해당 라이브러리를 알고 사용하도록하자. 아래 부분을 보자\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"bcryptjs\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"JavaScript 구현\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"순수 JavaScript로 구현된 bcrypt 라이브러리입니다.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"list-item\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"플랫폼 독립적\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"순수 JavaScript로 작성되어 있으므로 Node.js 환경뿐만 아니라 브라우저 환경에서도 사용할 수 있습니다.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"list-item\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"성능\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" \\nC++로 작성된 bcrypt보다는 느리지만, 많은 환경에서 여전히 충분한 성능을 제공합니다.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"list-item\"}],\"nodeType\":\"unordered-list\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"bcrypt\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"C++ 바인딩\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"C++로 작성된 라이브러리를 바인딩하여 사용합니다.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"list-item\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"성능\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"bcryptjs보다 더 빠른 성능을 제공하는 경우가 많습니다.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"list-item\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"플랫폼 의존적\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"C++ 코드로 작성되어 있어 Node.js 환경에서만 사용할 수 있습니다.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"list-item\"}],\"nodeType\":\"unordered-list\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"위 코드를 보면 나는 bcryptjs를 활용하였다. 이유는 \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"bcrypt\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\"이거 쓰면 에러가 발생하기때문이다^^(후... 이거때문에 몇일을 고생했는데...진짜 라이브러리도 알고 써야되는 걸 이때 알았다...)\\nbcrypt를 써도 가능은한데 해당 라이브러리는-> C++로 작성된 네이티브 코드를 포함하고 있어 컴파일러가 필요하다고한다.또한 웹팩 설정: Next.js의 웹팩 설정은 bcrypt와 같은 네이티브 모듈을 처리하지 못할 수 있습니다~? 라고 하길래 \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"strikethrough\"}],\"value\":\"순수한 사람\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\"답게 순수JS로 된\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"bcryptjs \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\"사용하는게 정신건강에 좋다...\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"다시 본론으로 돌아와서 시작해보겠습니다!!\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"auth.config.ts 파일을 만들어주자 당연 위 구조에 나와야있는 루트경로에 만들어준다.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"code\"}],\"value\":\"language::typescript\\nimport type { NextAuthConfig } from \\\"next-auth\\\";\\nimport * as jose from \\\"jose\\\";\\nimport { firestore } from \\\"./firebase/firebaseConfig\\\";\\nimport {addDoc,collection,doc,getDoc,getDocs,query,setDoc,where,} from \\\"firebase/firestore\\\";\\nimport jwt from \\\"jsonwebtoken\\\";\\n\\nconst secret = process.env.SECRET_KEY as string;\\nexport const authConfig = {\\n  pages: {\\n    signIn: \\\"/login\\\",\\n  },\\n  callbacks: {\\n    authorized({ auth, request: { nextUrl } }) {\\n      const isLoggedIn = !!auth?.user;\\n      const isOnUsers = nextUrl.pathname.startsWith(\\\"/\\\");\\n      if (isOnUsers) {\\n        if (isLoggedIn) return true;\\n        // );\\n        return \\\"/login\\\"; // 인증되지 않은 사용자는 로그인 페이지로 리디렉션\\n      } else if (isLoggedIn) {\\n        // );\\n        return \\\"/home\\\"; // 인증된 사용자는 홈 페이지로 리디렉션\\n      }\\n      return true;\\n    },\\n    async signIn({ user, account }: { user: any; account: any }) {\\n      if (\\n        account?.provider === \\\"kakao\\\" ||\\n        account?.provider === \\\"google\\\" ||\\n        account?.provider === \\\"naver\\\"\\n      ) {\\n        const { id, name, email, birthdate, image } = user;\\n        console.log(\\n          `[signIn callback] ${account.provider.toUpperCase()} 사용자 정보:`,\\n          user\\n        );\\n        const userDocRef = collection(firestore, \\\"users\\\");\\n        //console.log(\\\"[signIn callback] Firestore의 users 컬렉션에 접근합니다.\\\");\\n        const q = query(userDocRef, where(\\\"email\\\", \\\"==\\\", email));\\n        const querySnapshot = await getDocs(q);\\n        if (querySnapshot.empty) {\\n          // console.log(\\n          //   \\\"[signIn callback] 새로운 사용자를 /socialSign으로 리디렉션합니다\\\"\\n          // );\\n          // JWT 토큰 생성\\n          const token = jwt.sign(\\n            { id, name, email, birthdate, image, provider: account.provider\\n},\\nsecret,\\n            {\\n              expiresIn: \\\"30m\\\",\\n            }\\n          );\\n          //console.log(\\\"=================\\\", token);\\n// 리디렉션 경로에 JWT 토큰 추가\\n          return `/api/cookie?token=${token}`;\\n        }\\n        const userDoc = querySnapshot.docs[0];\\n        // console.log(\\n        //   \\\"[signIn callback] Firestore에 사용자 문서가 이미 존재합니다:\\\",\\n        //   userDoc.data()\\n        // );\\n // 이미 존재하는 사용자의 경우 데이터베이스에서 가져온 정보를 사용자 객체에 설정\\n        user.id = userDoc.id;\\n      }\\n      if (user.id) {\\n        const secret = new TextEncoder().encode(process.env.SECRET_KEY);\\n        const alg = \\\"HS256\\\";\\n        const accessToken = await new jose.SignJWT({})\\n          .setProtectedHeader({ alg })\\n          .setExpirationTime(\\\"72h\\\")\\n          .setSubject(user.id.toString())\\n          .sign(secret);\\n        const refreshToken = await new jose.SignJWT({})\\n          .setProtectedHeader({ alg })\\n          .setExpirationTime(\\\"30d\\\")\\n          .setSubject(user.id.toString())\\n          .sign(secret);\\n        user.accessToken = accessToken;\\n        user.refreshToken = refreshToken;\\n      }\\n      //console.log(\\\"[signIn callback] JWT 토큰 생성 후 사용자 정보:\\\", user);\\n      return true;\\n    },\\n    async jwt({ token, user }: { token: any; user: any }) {\\n      //console.log(\\\"[jwt callback] JWT 토큰 생성 - 사용자 정보:\\\", user);\\n      if (user) {\\n        token.id = user.id;\\n        token.nickname = user.nickname;\\n        token.accessToken = user.accessToken;\\n        token.refreshToken = user.refreshToken;\\n      }\\n      //console.log(\\\"[jwt callback] 생성된 JWT 토큰:\\\", token);\\n      return token;\\n    },\\n    async session({ session, token }: { session: any; token: any }) {\\n      //console.log(\\\"[session callback] 호출됨\\\");\\n      //console.log(\\\"[session callback] 세션 생성 - JWT 토큰:\\\", token);\\n      if (token?.id) {\\n        session.user.id = token.id;\\n        session.user.nickname = token.nickname;\\n        session.user.accessToken = token.accessToken;\\n        session.user.refreshToken = token.refreshToken;\\n      }\\n      //console.log(\\\"[session callback] 생성된 세션:\\\", session);\\n      return session;\\n    },\\n  },\\n  providers: [],\\n} as NextAuthConfig;\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"이제 클라이언트 부분을 작성해보자 아래 코드의 주석을 보면서 작성해보자!!\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"code\"}],\"value\":\"language::typescript\\n\\\"use client\\\"\\nimport { useState } from \\\"react\\\";\\nimport { signIn } from \\\"next-auth/react\\\";\\nimport { useRouter } from \\\"next/navigation\\\";\\n\\nexport default function LoginComponent() {\\nconst router = useRouter(); // useRouter 훅을 사용하여 라우터 접근\\n\\n// 로그인 요청을 처리하는 함수 \\nconst handleLogin = async (event: { preventDefault: () => void }) => {\\nevent.preventDefault(); // signIn 함수 호출하여 로그인 시도\\n const result = await signIn(\\\"credentials\\\", { //여기에 위에서 만든 signIn 함수\\n  redirect: false, // 로그인 후 리디렉션을 직접 제어하려면 false로 설정\\n  username,\\n  password, });\\n\\n if (result?.error) {\\n       alert(\\\"로그인 실패\\\");\\n    console.error(result.error)\\n } else {\\n  //로그인 성공 시 홈 페이지로 리디렉션 (원하는 곳으로 이동)\\n   console.log(\\\"로그인성공:\\\",result)\\n   router.push(\\\"/home\\\");\\n } \\n};\\n\\nreturn ( \\n    <div className=\\\"flex items-center justify-center min-h-screen bg-gray-100\\\">\\n      <div className=\\\"w-full max-w-sm p-8 bg-white rounded-lg shadow-md\\\">\\n        <h1 className=\\\"text-2xl font-bold mb-6 text-center\\\">로그인</h1>\\n        <form onSubmit={handleLogin}>\\n          <div className=\\\"mb-4\\\">\\n            <label\\n              htmlFor=\\\"username\\\"\\n              className=\\\"block text-sm font-medium text-gray-700 mb-2\\\"\\n            >\\n              아이디\\n            </label>\\n            <input\\n              type=\\\"text\\\"\\n              id=\\\"username\\\"\\n              value={username}\\n              className=\\\"w-full px-3 py-2 border border-gray-300 rounded-md\\n                         shadow-sm focus:outline-none focus:ring-indigo-500                                         \\n                         focus:border-indigo-500 sm:text-sm\\\"\\n            />\\n          </div>\\n          <div className=\\\"mb-6\\\">\\n            <label\\n              htmlFor=\\\"password\\\"\\n              className=\\\"block text-sm font-medium text-gray-700 mb-2\\\"\\n            >\\n              비밀번호\\n            </label>\\n            <input\\n              type=\\\"password\\\"\\n              id=\\\"password\\\"\\n              value={password}\\n              className=\\\"w-full px-3 py-2 border border-gray-300 rounded-md\\n                         shadow-sm focus:outline-none focus:ring-indigo-500             \\n                          focus:border-indigo-500 sm:text-sm\\\"          \\n            />\\n          </div>\\n          <button\\n            type=\\\"submit\\\"\\n            className=\\\"w-full py-2 px-4 bg-blue-500 text-white font-semibold\\n                       rounded-md shadow-sm hover:bg-blue-600 focus:outline-       \\n                       none focus:ring-2 focus:ring-offset-2 focus:ring-\\n                       blue-500\\\"\\n          >\\n            로그인\\n          </button>\\n        </form>\\n      </div>\\n    </div>\\n );\\n}\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"여기 까지 하면 정상해서 직접해본결과를 아래에서 그림을 보자\\n사용자의 정보가 예를 들어서 아이디는 test_1234  , 암호는 1234 라고 생각하자. \\n정상적으로 입력한경우 로그인 성공이라는 콘솔로그를 확인해보자.\\n\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{\"target\":{\"sys\":{\"id\":\"2ssVdC2TmHMuFRkepGjK8h\",\"type\":\"Link\",\"linkType\":\"Asset\"}}},\"content\":[],\"nodeType\":\"embedded-asset-block\"},{\"data\":{\"target\":{\"sys\":{\"id\":\"6BrSxnqy7IITJy4SOxvpOI\",\"type\":\"Link\",\"linkType\":\"Asset\"}}},\"content\":[],\"nodeType\":\"embedded-asset-block\"},{\"data\":{\"target\":{\"sys\":{\"id\":\"5Htmk3zXtanSZRYqe2r8ch\",\"type\":\"Link\",\"linkType\":\"Asset\"}}},\"content\":[],\"nodeType\":\"embedded-asset-block\"},{\"data\":{\"target\":{\"sys\":{\"id\":\"BH9UOVIftS3I81PAzUtzJ\",\"type\":\"Link\",\"linkType\":\"Asset\"}}},\"content\":[],\"nodeType\":\"embedded-asset-block\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"\\n\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"로그인 기능 구현 완료\\n\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\"위와 같이 로그인 기능이 성공적으로 구현되었습니다. 로그인 후 쿠키도 정상적으로 설정되었으며, 원하는 페이지로의 리디렉션도 성공적으로 진행되었습니다.\\n소셜 로그인 관련 부분은 코드에 포함되어 있지만, 이 부분은 다음 번에 자세히 정리하도록 하겠습니다. 설명이 많아 두 번으로 나눠서 작성할 예정입니다.\\n여기까지 NextAuth를 활용한 로그인 기능을 구현해보았습니다. 긴 글을 읽어 주셔서 감사합니다. 도움이 되셨다면, 댓글 한 번 부탁드립니다.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"document\"}","references":[{"contentful_id":"1Nqvz5GZwOL8TL4fknkacH","title":"스크린샷 2024-08-06 오후 11.16.51.png","description":"구조","gatsbyImageData":{"images":{"sources":[{"srcSet":"https://images.ctfassets.net/v4l4nvur12dk/1Nqvz5GZwOL8TL4fknkacH/aa77644f5bd1a4cd4810fa8e6141cdba/___________2024-08-06______11.16.51.png?w=79&h=81&q=50&fm=webp 79w,\nhttps://images.ctfassets.net/v4l4nvur12dk/1Nqvz5GZwOL8TL4fknkacH/aa77644f5bd1a4cd4810fa8e6141cdba/___________2024-08-06______11.16.51.png?w=159&h=162&q=50&fm=webp 159w,\nhttps://images.ctfassets.net/v4l4nvur12dk/1Nqvz5GZwOL8TL4fknkacH/aa77644f5bd1a4cd4810fa8e6141cdba/___________2024-08-06______11.16.51.png?w=317&h=324&q=50&fm=webp 317w","sizes":"(min-width: 317px) 317px, 100vw","type":"image/webp"}],"fallback":{"src":"https://images.ctfassets.net/v4l4nvur12dk/1Nqvz5GZwOL8TL4fknkacH/aa77644f5bd1a4cd4810fa8e6141cdba/___________2024-08-06______11.16.51.png?w=317&h=324&q=50&fm=png","srcSet":"https://images.ctfassets.net/v4l4nvur12dk/1Nqvz5GZwOL8TL4fknkacH/aa77644f5bd1a4cd4810fa8e6141cdba/___________2024-08-06______11.16.51.png?w=79&h=81&q=50&fm=png 79w,\nhttps://images.ctfassets.net/v4l4nvur12dk/1Nqvz5GZwOL8TL4fknkacH/aa77644f5bd1a4cd4810fa8e6141cdba/___________2024-08-06______11.16.51.png?w=159&h=162&q=50&fm=png 159w,\nhttps://images.ctfassets.net/v4l4nvur12dk/1Nqvz5GZwOL8TL4fknkacH/aa77644f5bd1a4cd4810fa8e6141cdba/___________2024-08-06______11.16.51.png?w=317&h=324&q=50&fm=png 317w","sizes":"(min-width: 317px) 317px, 100vw"}},"layout":"constrained","backgroundColor":"#282828","width":774,"height":791},"__typename":"ContentfulAsset"},{"contentful_id":"2ssVdC2TmHMuFRkepGjK8h","title":"스크린샷 2024-08-06 오후 11.02.02.png","description":"로그인","gatsbyImageData":{"images":{"sources":[{"srcSet":"https://images.ctfassets.net/v4l4nvur12dk/2ssVdC2TmHMuFRkepGjK8h/4edfd5530f6d6ab8a40914e901bcaacb/___________2024-08-06______11.02.02.png?w=194&h=172&q=50&fm=webp 194w,\nhttps://images.ctfassets.net/v4l4nvur12dk/2ssVdC2TmHMuFRkepGjK8h/4edfd5530f6d6ab8a40914e901bcaacb/___________2024-08-06______11.02.02.png?w=387&h=344&q=50&fm=webp 387w,\nhttps://images.ctfassets.net/v4l4nvur12dk/2ssVdC2TmHMuFRkepGjK8h/4edfd5530f6d6ab8a40914e901bcaacb/___________2024-08-06______11.02.02.png?w=774&h=687&q=50&fm=webp 774w","sizes":"(min-width: 774px) 774px, 100vw","type":"image/webp"}],"fallback":{"src":"https://images.ctfassets.net/v4l4nvur12dk/2ssVdC2TmHMuFRkepGjK8h/4edfd5530f6d6ab8a40914e901bcaacb/___________2024-08-06______11.02.02.png?w=774&h=687&q=50&fm=png","srcSet":"https://images.ctfassets.net/v4l4nvur12dk/2ssVdC2TmHMuFRkepGjK8h/4edfd5530f6d6ab8a40914e901bcaacb/___________2024-08-06______11.02.02.png?w=194&h=172&q=50&fm=png 194w,\nhttps://images.ctfassets.net/v4l4nvur12dk/2ssVdC2TmHMuFRkepGjK8h/4edfd5530f6d6ab8a40914e901bcaacb/___________2024-08-06______11.02.02.png?w=387&h=344&q=50&fm=png 387w,\nhttps://images.ctfassets.net/v4l4nvur12dk/2ssVdC2TmHMuFRkepGjK8h/4edfd5530f6d6ab8a40914e901bcaacb/___________2024-08-06______11.02.02.png?w=774&h=687&q=50&fm=png 774w","sizes":"(min-width: 774px) 774px, 100vw"}},"layout":"constrained","backgroundColor":"#f8f8f8","width":774,"height":687},"__typename":"ContentfulAsset"},{"contentful_id":"6BrSxnqy7IITJy4SOxvpOI","title":"스크린샷 2024-08-06 오후 11.02.23.png","description":"로그인2","gatsbyImageData":{"images":{"sources":[{"srcSet":"https://images.ctfassets.net/v4l4nvur12dk/6BrSxnqy7IITJy4SOxvpOI/48f67606e68b720b561ebdd509e73289/___________2024-08-06______11.02.23.png?w=185&h=31&q=50&fm=webp 185w,\nhttps://images.ctfassets.net/v4l4nvur12dk/6BrSxnqy7IITJy4SOxvpOI/48f67606e68b720b561ebdd509e73289/___________2024-08-06______11.02.23.png?w=369&h=62&q=50&fm=webp 369w,\nhttps://images.ctfassets.net/v4l4nvur12dk/6BrSxnqy7IITJy4SOxvpOI/48f67606e68b720b561ebdd509e73289/___________2024-08-06______11.02.23.png?w=738&h=124&q=50&fm=webp 738w","sizes":"(min-width: 738px) 738px, 100vw","type":"image/webp"}],"fallback":{"src":"https://images.ctfassets.net/v4l4nvur12dk/6BrSxnqy7IITJy4SOxvpOI/48f67606e68b720b561ebdd509e73289/___________2024-08-06______11.02.23.png?w=738&h=124&q=50&fm=png","srcSet":"https://images.ctfassets.net/v4l4nvur12dk/6BrSxnqy7IITJy4SOxvpOI/48f67606e68b720b561ebdd509e73289/___________2024-08-06______11.02.23.png?w=185&h=31&q=50&fm=png 185w,\nhttps://images.ctfassets.net/v4l4nvur12dk/6BrSxnqy7IITJy4SOxvpOI/48f67606e68b720b561ebdd509e73289/___________2024-08-06______11.02.23.png?w=369&h=62&q=50&fm=png 369w,\nhttps://images.ctfassets.net/v4l4nvur12dk/6BrSxnqy7IITJy4SOxvpOI/48f67606e68b720b561ebdd509e73289/___________2024-08-06______11.02.23.png?w=738&h=124&q=50&fm=png 738w","sizes":"(min-width: 738px) 738px, 100vw"}},"layout":"constrained","backgroundColor":"#282828","width":774,"height":130},"__typename":"ContentfulAsset"},{"contentful_id":"5Htmk3zXtanSZRYqe2r8ch","title":"스크린샷 2024-08-06 오후 11.03.08.png","description":"로그인3","gatsbyImageData":{"images":{"sources":[{"srcSet":"https://images.ctfassets.net/v4l4nvur12dk/5Htmk3zXtanSZRYqe2r8ch/34f4ba91e929c1b2533ee5b78be8067a/___________2024-08-06______11.03.08.png?w=149&h=66&q=50&fm=webp 149w,\nhttps://images.ctfassets.net/v4l4nvur12dk/5Htmk3zXtanSZRYqe2r8ch/34f4ba91e929c1b2533ee5b78be8067a/___________2024-08-06______11.03.08.png?w=297&h=132&q=50&fm=webp 297w,\nhttps://images.ctfassets.net/v4l4nvur12dk/5Htmk3zXtanSZRYqe2r8ch/34f4ba91e929c1b2533ee5b78be8067a/___________2024-08-06______11.03.08.png?w=594&h=263&q=50&fm=webp 594w","sizes":"(min-width: 594px) 594px, 100vw","type":"image/webp"}],"fallback":{"src":"https://images.ctfassets.net/v4l4nvur12dk/5Htmk3zXtanSZRYqe2r8ch/34f4ba91e929c1b2533ee5b78be8067a/___________2024-08-06______11.03.08.png?w=594&h=263&q=50&fm=png","srcSet":"https://images.ctfassets.net/v4l4nvur12dk/5Htmk3zXtanSZRYqe2r8ch/34f4ba91e929c1b2533ee5b78be8067a/___________2024-08-06______11.03.08.png?w=149&h=66&q=50&fm=png 149w,\nhttps://images.ctfassets.net/v4l4nvur12dk/5Htmk3zXtanSZRYqe2r8ch/34f4ba91e929c1b2533ee5b78be8067a/___________2024-08-06______11.03.08.png?w=297&h=132&q=50&fm=png 297w,\nhttps://images.ctfassets.net/v4l4nvur12dk/5Htmk3zXtanSZRYqe2r8ch/34f4ba91e929c1b2533ee5b78be8067a/___________2024-08-06______11.03.08.png?w=594&h=263&q=50&fm=png 594w","sizes":"(min-width: 594px) 594px, 100vw"}},"layout":"constrained","backgroundColor":"#282828","width":774,"height":342.99999999999994},"__typename":"ContentfulAsset"},{"contentful_id":"BH9UOVIftS3I81PAzUtzJ","title":"스크린샷 2024-08-06 오후 11.02.34.png","description":"로그인4","gatsbyImageData":{"images":{"sources":[{"srcSet":"https://images.ctfassets.net/v4l4nvur12dk/BH9UOVIftS3I81PAzUtzJ/c324387b85bf92f840590362255a60a7/___________2024-08-06______11.02.34.png?w=122&h=17&q=50&fm=webp 122w,\nhttps://images.ctfassets.net/v4l4nvur12dk/BH9UOVIftS3I81PAzUtzJ/c324387b85bf92f840590362255a60a7/___________2024-08-06______11.02.34.png?w=244&h=34&q=50&fm=webp 244w,\nhttps://images.ctfassets.net/v4l4nvur12dk/BH9UOVIftS3I81PAzUtzJ/c324387b85bf92f840590362255a60a7/___________2024-08-06______11.02.34.png?w=488&h=68&q=50&fm=webp 488w","sizes":"(min-width: 488px) 488px, 100vw","type":"image/webp"}],"fallback":{"src":"https://images.ctfassets.net/v4l4nvur12dk/BH9UOVIftS3I81PAzUtzJ/c324387b85bf92f840590362255a60a7/___________2024-08-06______11.02.34.png?w=488&h=68&q=50&fm=png","srcSet":"https://images.ctfassets.net/v4l4nvur12dk/BH9UOVIftS3I81PAzUtzJ/c324387b85bf92f840590362255a60a7/___________2024-08-06______11.02.34.png?w=122&h=17&q=50&fm=png 122w,\nhttps://images.ctfassets.net/v4l4nvur12dk/BH9UOVIftS3I81PAzUtzJ/c324387b85bf92f840590362255a60a7/___________2024-08-06______11.02.34.png?w=244&h=34&q=50&fm=png 244w,\nhttps://images.ctfassets.net/v4l4nvur12dk/BH9UOVIftS3I81PAzUtzJ/c324387b85bf92f840590362255a60a7/___________2024-08-06______11.02.34.png?w=488&h=68&q=50&fm=png 488w","sizes":"(min-width: 488px) 488px, 100vw"}},"layout":"constrained","backgroundColor":"#182828","width":774,"height":108},"__typename":"ContentfulAsset"}]}}},"pageContext":{"slug":"nextAuth"}},"staticQueryHashes":["408564090"],"slicesMap":{}}