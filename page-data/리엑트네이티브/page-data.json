{"componentChunkName":"component---src-templates-post-tsx","path":"/리엑트네이티브/","result":{"data":{"contentfulPost":{"title":"React-Native의 시작해보자","category":["도전"],"date":"2024-09-21","slug":"리엑트네이티브","thumbnail":{"url":"https://images.ctfassets.net/v4l4nvur12dk/77GWaoyfx41GrEhAsgUUhn/f4bb2f7e23fa78cd494f6d190bf36014/_______.jpg","gatsbyImageData":{"images":{"sources":[{"srcSet":"https://images.ctfassets.net/v4l4nvur12dk/77GWaoyfx41GrEhAsgUUhn/f4bb2f7e23fa78cd494f6d190bf36014/_______.jpg?w=250&h=167&q=50&fm=webp 250w,\nhttps://images.ctfassets.net/v4l4nvur12dk/77GWaoyfx41GrEhAsgUUhn/f4bb2f7e23fa78cd494f6d190bf36014/_______.jpg?w=500&h=334&q=50&fm=webp 500w,\nhttps://images.ctfassets.net/v4l4nvur12dk/77GWaoyfx41GrEhAsgUUhn/f4bb2f7e23fa78cd494f6d190bf36014/_______.jpg?w=1000&h=667&q=50&fm=webp 1000w,\nhttps://images.ctfassets.net/v4l4nvur12dk/77GWaoyfx41GrEhAsgUUhn/f4bb2f7e23fa78cd494f6d190bf36014/_______.jpg?w=2000&h=1334&q=50&fm=webp 2000w","sizes":"(min-width: 1000px) 1000px, 100vw","type":"image/webp"}],"fallback":{"src":"https://images.ctfassets.net/v4l4nvur12dk/77GWaoyfx41GrEhAsgUUhn/f4bb2f7e23fa78cd494f6d190bf36014/_______.jpg?w=1000&h=667&fl=progressive&q=50&fm=jpg","srcSet":"https://images.ctfassets.net/v4l4nvur12dk/77GWaoyfx41GrEhAsgUUhn/f4bb2f7e23fa78cd494f6d190bf36014/_______.jpg?w=250&h=167&fl=progressive&q=50&fm=jpg 250w,\nhttps://images.ctfassets.net/v4l4nvur12dk/77GWaoyfx41GrEhAsgUUhn/f4bb2f7e23fa78cd494f6d190bf36014/_______.jpg?w=500&h=334&fl=progressive&q=50&fm=jpg 500w,\nhttps://images.ctfassets.net/v4l4nvur12dk/77GWaoyfx41GrEhAsgUUhn/f4bb2f7e23fa78cd494f6d190bf36014/_______.jpg?w=1000&h=667&fl=progressive&q=50&fm=jpg 1000w,\nhttps://images.ctfassets.net/v4l4nvur12dk/77GWaoyfx41GrEhAsgUUhn/f4bb2f7e23fa78cd494f6d190bf36014/_______.jpg?w=2000&h=1334&fl=progressive&q=50&fm=jpg 2000w","sizes":"(min-width: 1000px) 1000px, 100vw"}},"layout":"constrained","backgroundColor":"#080808","width":1000,"height":667}},"description":{"description":"React의 구조는 파악하고 웹뷰로 앱을 개발한 경험은 있지만, 실제로 네이티브 앱을 만든 적은 없습니다. 이제 React Native를 통해 네이티브 앱 개발을 시작해보려 합니다. 익숙한 React 문법을 바탕으로, 새로운 도전을 해보자~!"},"content":{"raw":"{\"nodeType\":\"document\",\"data\":{},\"content\":[{\"nodeType\":\"heading-3\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"React Native를 선택한 이유\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"React의 구조를 이미 알고 있고, 사용 방법이 익숙하기 때문에 앱 개발을 할 때 React Native를 학습하는 것이 자연스러웠습니다. 기존에 웹에서의 경험을 살려 네이티브 앱 개발로 넘어갈 수 있는 점이 매력적이었죠.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-3\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"React Native와 React의 차이점\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"React에서는 <div> 태그를 사용하지만, React Native에서는 <View>라는 네이티브 컴포넌트를 사용합니다. <button> 태그 대신에는 <Button> 컴포넌트가 있으며, 클릭 이벤트도 onClick이 아닌 onPress로 처리됩니다. 아래 간단한 예시코드를 보자\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"language::typescript\\n// React \\n<div onClick={handleClick}>Click me!</div>\\n \\n// React Native \\n<View onPress={handlePress}>\\n <Text>Click me!</Text>\\n</View>\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"예시코드를 보면 큰 차이 없이 적응할 수 있다는 점이 너무 큰 장점으로 다가왔다!\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"그 내용을 적어보면 다음과 같이 정리할 수 있습니다:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-3\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"학습 중 알게 된 사항: iOS와 Android의 스타일 차이\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"React Native에서 <Text> 컴포넌트의 스타일링 시, iOS와 Android에서 다르게 동작하는 점이 있었습니다. 예를 들어, 다음 코드처럼 <Text> 컴포넌트에 borderRadius 스타일을 적용했을 때, Android에서는 둥근 모서리가 잘 적용되지만 iOS에서는 적용되지 않습니다. 아래 코드를 확인해보자!\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"language::typescript\\n<View style={styles.goalsContainer}>\\n {courseGoals.map((i, k) => (\\n  <Text style={styles.goalItem} key={k}>\\n    {i}\\n  </Text>\\n ))}\\n</View>\\nconst styles = StyleSheet.create({\\n  goalItem: {\\n  margin: 8,\\n  padding: 8,\\n  borderRadius: 6,\\n  backgroundColor: \\\"#5e0acc\\\",\\n  color: \\\"white\\\",\\n },\\n});\",\"marks\":[{\"type\":\"code\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\n이 문제를 해결하기 위해서는 <Text>를 <View> 컴포넌트로 감싸줘야 합니다.\\n\",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"language::typescript\\n<View style={styles.goalsContainer}>\\n  {courseGoals.map((i, k) => (\\n   <View style={styles.goalItem} key={k}>\\n      <Text>{i}</Text>\\n   </View>\\n ))}\\n</View>\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"하지만 위와 같이만 하면 텍스트의 색상이 사라지기 때문에, 텍스트에 별도의 스타일을 적용해야된다.\\n\",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"language::typescript\\n<View style={styles.goalsContainer}>\\n {courseGoals.map((i, k) => (\\n      <View style={styles.goalItem} key={k}>\\n          <Text style={styles.goalText}>{i}</Text>\\n      </View>\\n ))}\\n</View>\\n\\nconst styles = StyleSheet.create({\\n goalsContainer: { \\n   flex: 8,\\n }, \\n goalItem: {\\n   margin: 8, \\n   padding: 8,\\n   borderRadius: 6,\\n   backgroundColor: \\\"#5e0acc\\\",\\n },\\n goalText: {\\n   color: \\\"white\\\", \\n }, \\n});\",\"marks\":[{\"type\":\"code\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\n이렇게 구조를 변경하면, iOS와 Android 모두에서 둥근 모서리와 텍스트 색상이 정상적으로 적용됩니다.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-3\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"웹뷰로 앱을 개발한 경험\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"과거에 웹뷰로 앱을 개발한 적이 있습니다. 그 당시에는 RTC와 소켓을 이용해 화상 학습 기능을 구현했지만, 화면 공유 같은 네이티브 기능을 제대로 사용할 수 없었습니다. 웹뷰로 구현된 화면 공유 기능은 앱에서 제대로 작동하지 않았기 때문에, 웹뷰 대신 네이티브 앱을 직접 개발하는 것이 더 나은 선택이라는 것을 깨달았습니다.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-3\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"앞으로의 목표\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"익숙한 React 구조를 바탕으로 모바일 네이티브 기능을 다루면서, 웹뷰로는 한계가 있었던 네이티브 앱 개발의 경험을 쌓는 것이 목표입니다.\",\"marks\":[],\"data\":{}}]}]}","references":[]}}},"pageContext":{"slug":"리엑트네이티브"}},"staticQueryHashes":["408564090"],"slicesMap":{}}