{"version":3,"file":"component---src-pages-404-tsx-67911476e1f4e7f6fc5d.js","mappings":"kKAIA,MAAMA,EAAc,YAeL,SAASC,EAAGC,GAMZ,IANa,MAC1BC,EAAK,YACLC,EAAW,SACXC,EAAQ,MACRC,EAAK,SACLC,GACUL,EACV,MACEM,MAAM,aAAEC,GACRC,MAAQC,UAAWC,KACjBC,EAAAA,EAAAA,IAAeb,GAEbc,EAAW,CACfX,MAAOA,QAAAA,EAASM,EAAaN,MAC7BC,YAAaA,QAAAA,EAAeK,EAAaL,YACzCW,QAAS,GAAGN,EAAaM,UAAUV,QAAAA,EAAY,KAC/CC,MAAOA,QAAAA,EAASM,GAGlB,OACEI,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAV,SAAA,EACEW,EAAAA,EAAAA,KAAA,SAAAX,SAAQO,EAASX,SAEjBe,EAAAA,EAAAA,KAAA,QAAMC,KAAK,QACXD,EAAAA,EAAAA,KAAA,QAAME,KAAK,cAAcC,QAASP,EAASV,eAC3Cc,EAAAA,EAAAA,KAAA,QAAME,KAAK,WAAWC,QAAQ,2CAC9BH,EAAAA,EAAAA,KAAA,QAAMI,UAAU,eAAeD,QAAQ,6BAEvCH,EAAAA,EAAAA,KAAA,QAAMK,SAAS,UAAUF,QAAQ,aACjCH,EAAAA,EAAAA,KAAA,QAAMK,SAAS,WAAWF,QAASP,EAASX,SAC5Ce,EAAAA,EAAAA,KAAA,QAAMK,SAAS,iBAAiBF,QAASP,EAASV,eAClDc,EAAAA,EAAAA,KAAA,QAAMK,SAAS,WAAWF,QAASP,EAASR,SAC5CY,EAAAA,EAAAA,KAAA,QAAMK,SAAS,SAASF,QAASP,EAASC,WAC1CG,EAAAA,EAAAA,KAAA,QAAMK,SAAS,eAAeF,QAASP,EAASX,SAEhDe,EAAAA,EAAAA,KAAA,QAAME,KAAK,eAAeC,QAAQ,aAClCH,EAAAA,EAAAA,KAAA,QAAME,KAAK,gBAAgBC,QAASP,EAASX,SAC7Ce,EAAAA,EAAAA,KAAA,QAAME,KAAK,sBAAsBC,QAASP,EAASV,eACnDc,EAAAA,EAAAA,KAAA,QAAME,KAAK,gBAAgBC,QAASP,EAASR,SAC7CY,EAAAA,EAAAA,KAAA,QAAME,KAAK,eAAeC,QAAQ,YAClCH,EAAAA,EAAAA,KAAA,QAAME,KAAK,kBAAkBC,QAAQ,YACrCH,EAAAA,EAAAA,KAAA,QACEE,KAAK,0BACLC,QAAQ,6CAGTd,IAGP,C,wIC/De,SAASiB,IACtB,OACER,EAAAA,EAAAA,MAACS,EAAO,CAAAlB,SAAA,EACNW,EAAAA,EAAAA,KAACQ,EAAK,CAAAnB,SAAC,qBACPW,EAAAA,EAAAA,KAACS,EAAW,CAAApB,SAAC,wBACbW,EAAAA,EAAAA,KAACU,EAAQ,CAACC,GAAG,IAAGtB,SAAC,cAGvB,CAEO,MAAMuB,EAAeA,KAAMZ,EAAAA,EAAAA,KAACjB,EAAAA,EAAG,IAEhCwB,EAAUM,EAAAA,QAAOC,IAAGC,WAAA,CAAAC,YAAA,kBAAAC,YAAA,gBAAVJ,CAAU,2EAOpBL,EAAQK,EAAAA,QAAOC,IAAGC,WAAA,CAAAC,YAAA,gBAAAC,YAAA,gBAAVJ,CAAU,8EASlBJ,EAAcI,EAAAA,QAAOC,IAAGC,WAAA,CAAAC,YAAA,sBAAAC,YAAA,gBAAVJ,CAAU,8FAUxBH,GAAWG,EAAAA,EAAAA,SAAOK,EAAAA,IAAKH,WAAA,CAAAC,YAAA,mBAAAC,YAAA,gBAAZJ,CAAY,kD","sources":["webpack://dev_apple/./src/components/common/Seo.tsx","webpack://dev_apple/./src/pages/404.tsx"],"sourcesContent":["import React from 'react'\nimport { TSEOProps } from '../../types/SeoType'\nimport { graphql, useStaticQuery } from 'gatsby'\n\nconst METADATA_QUERY = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        description\n        siteUrl\n      }\n    }\n    file(name: { eq: \"JH_0\" }) {\n      publicURL\n    }\n  }\n`\n\nexport default function SEO({\n  title,\n  description,\n  pathname,\n  image,\n  children,\n}: TSEOProps) {\n  const {\n    site: { siteMetadata },\n    file: { publicURL: defaultImage },\n  } = useStaticQuery(METADATA_QUERY)\n\n  const metadata = {\n    title: title ?? siteMetadata.title,\n    description: description ?? siteMetadata.description,\n    siteUrl: `${siteMetadata.siteUrl}${pathname ?? ''}`,\n    image: image ?? defaultImage,\n  }\n\n  return (\n    <>\n      <title>{metadata.title}</title>\n\n      <html lang=\"ko\" />\n      <meta name=\"description\" content={metadata.description} />\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n      <meta httpEquiv=\"Content-Type\" content=\"text/html;charset=UTF-8\" />\n\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:title\" content={metadata.title} />\n      <meta property=\"og:description\" content={metadata.description} />\n      <meta property=\"og:image\" content={metadata.image} />\n      <meta property=\"og:url\" content={metadata.siteUrl} />\n      <meta property=\"og:site_name\" content={metadata.title} />\n\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:title\" content={metadata.title} />\n      <meta name=\"twitter:description\" content={metadata.description} />\n      <meta name=\"twitter:image\" content={metadata.image} />\n      <meta name=\"twitter:site\" content=\"@사용자이름\" />\n      <meta name=\"twitter:creator\" content=\"@사용자이름\" />\n      <meta\n        name=\"naver-site-verification\"\n        content=\"259e0b3b5b2f341f70108a526997cc6230a7b762\"\n      />\n\n      {children}\n    </>\n  )\n}\n","import { HeadFC, Link } from 'gatsby'\nimport React from 'react'\nimport styled from 'styled-components'\nimport SEO from '../components/common/Seo'\n\nexport default function NotFoundPage() {\n  return (\n    <Wrapper>\n      <Title>페이지를 찾을 수 없습니다.</Title>\n      <Description>다른 콘텐츠를 보러 가보시겠어요?</Description>\n      <PageLink to=\"/\">메인 페이지로</PageLink>\n    </Wrapper>\n  )\n}\n\nexport const Head: HeadFC = () => <SEO />\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 150px 0;\n`\n\nconst Title = styled.div`\n  font-size: 30px;\n  font-weight: 700;\n\n  @media (max-width: 768px) {\n    font-size: 25px;\n  }\n`\n\nconst Description = styled.div`\n  margin-top: 10px;\n  font-size: 20px;\n  font-weight: 300;\n\n  @media (max-width: 768px) {\n    font-size: 18px;\n  }\n`\n\nconst PageLink = styled(Link)`\n  margin-top: 30px;\n  font-size: 15px;\n  color: inherit;\n`\n"],"names":["METADATA_QUERY","SEO","_ref","title","description","pathname","image","children","site","siteMetadata","file","publicURL","defaultImage","useStaticQuery","metadata","siteUrl","_jsxs","_Fragment","_jsx","lang","name","content","httpEquiv","property","NotFoundPage","Wrapper","Title","Description","PageLink","to","Head","styled","div","withConfig","displayName","componentId","Link"],"sourceRoot":""}